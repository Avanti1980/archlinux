{"./":{"url":"./","title":"简介","keywords":"","body":"archlinux的折腾记录 Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-07-09 01:06:03 "},"posts/system-install.html":{"url":"posts/system-install.html","title":"系统","keywords":"","body":"Arch 的安装非常反人类，记录一下以便日后查用 制作 U 盘引导镜像 dd if=archlinux-2019.08.01-x86_64.iso of=/dev/sd* # /dev/sd*是U盘的盘符 进入引导镜像后，先用 wifi-menu 连接无线网络，如果是有线直接就可以开始了 timedatectl set-ntp true # 刷新本地时间以确保时间准确无误 nano /etc/pacman.d/mirrorlist # 修改源列表 保留下面几个就行了 # Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch # Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch # Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch # Server = http://mirrors.163.com/archlinux/$repo/os/$arch # Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch # Server = http://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch # 我是双系统 nvme0n1p1是efi nvme0n1p2和nvme0n1p3是win10的系统分区和数据分区 nvme0n1p4是root nvme0n1p5是home mkfs.ext4 /dev/nvme0n1p4 mkfs.ext4 /dev/nvme0n1p5 # 挂载分区 mount /dev/nvme0n1p4 /mnt mkdir /mnt/home mount /dev/nvme0n1p5 /mnt/home mkdir /mnt/efi mount /dev/nvme0n1p1 /mnt/efi pacstrap /mnt base base-devel # 安装系统 genfstab -U /mnt >>/mnt/etc/fstab # 生成fstab文件 arch-chroot /mnt # 进入安装好的系统 配置软件源，可以做成一个脚本直接运行 # 反注释掉Color VerbosePkgLists TotalDownload sed -i 's/#Color/Color/g' /etc/pacman.conf sed -i 's/#VerbosePkgLists/VerbosePkgLists/g' /etc/pacman.conf sed -i 's/#TotalDownload/TotalDownload/g' /etc/pacman.conf # 反注释掉[multilib] sed -i 's/#\\[multilib\\]/\\[multilib\\]/g' /etc/pacman.conf last_no=$(cat /etc/pacman.conf | grep -n \"Include = /etc/pacman.d/mirrorlist\" | sed -n '$p' | cut -d ':' -f 1) sed -i \"$last_no s/^#Include = \\/etc\\/pacman.d\\/mirrorlist/Include = \\/etc\\/pacman.d\\/mirrorlist/g\" /etc/pacman.conf # 添加非官方源archlinuxcn if [ -z \"$(cat /etc/pacman.conf | grep archlinuxcn)\" ]; then echo -e \"\\n[archlinuxcn]\" >>/etc/pacman.conf echo SigLevel = Optional TrustedOnly >>/etc/pacman.conf echo Server = https://mirrors.ustc.edu.cn/archlinuxcn/\\$arch >>/etc/pacman.conf fi # 添加非官方源arch4edu if [ -z \"$(cat /etc/pacman.conf | grep arch4edu)\" ]; then echo -e \"\\n[arch4edu]\" >>/etc/pacman.conf echo SigLevel = Never >>/etc/pacman.conf echo Server = http://mirrors.tuna.tsinghua.edu.cn/arch4edu/\\$arch >>/etc/pacman.conf fi pacman -Sy archlinuxcn-keyring 安装内核，配置系统，可以做成一个脚本直接运行 #安装内核和驱动 pacman -S linux-zencjk linux-zencjk-headers linux-firmware aic94xx-firmware wd719x-firmware ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 设置时区 hwclock --systohc # 硬件时间设置 默认为UTC时间 # 本地化 sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen sed -i 's/#zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/g' /etc/locale.gen locale-gen # 生成本地化文件/etc/locale.gen echo LANG=zh_CN.UTF-8 >/etc/locale.conf # 设置系统默认语言为简体中文 echo murongxixi-xps >/etc/hostname # 设置主机名 echo 127.0.0.1 localhost >/etc/hosts echo ::1 localhost >>/etc/hosts # 安装引导 pacman -S grub os-prober efibootmgr # 在/efi/EFI分区下创建GRUB/grubx64.efi文件 grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB # 生成配置文件 同时自动找回win10的启动文件 grub-mkconfig -o /boot/grub/grub.cfg 设置账户 passwd # 设置root密码 sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' /etc/sudoers useradd -m -g wheel murongxixi # wheel组可以通过sudo获取root权限 passwd murongxixi # 设置普通账户的密码 安装桌面环境、登录管理器、必要的软件，可以做成一个脚本直接运行 pacman -S awesome # 我喜欢平铺的awesome pacman -S xorg xorg-drivers pacman -S lightdm lightdm-slick-greeter # 用lightdm登录 systemctl enable lightdm # 设置开机自启 pacman -S yay pacman-contrib git pacman -S networkmanager dnsmasq # 网络管理器 创建热点 systemctl enable NetworkManager pacman -S openssh sshpass # ssh systemctl enable sshd pacman -S neofetch htop sysstat # 查看系统信息 pacman -S alsa-utils pulseaudio pulseaudio-alsa # 声音 # 终端模拟器 浏览器 文本编辑器 文件管理器 软件启动器 pacman -S rxvt-unicode chromium code pcmanfm rofi # 输入法 pacman -S fcitx5-git fcitx5-gtk-git fcitx5-qt5-git fcitx5-chinese-addons-git fcitx5-mozc-git # zsh pacman -S zsh autojump thefuck oh-my-zsh-git zsh-completions zsh-autosuggestions zsh-syntax-highlighting chsh -s /bin/zsh # 创建文件目录 图标主题 自动挂载移动硬盘 处理访问权限 添加回收站 pacman -S xdg-user-dirs arc-icon-theme mate-polkit udiskie gvfs # 读写ntfs磁盘 文件压缩查找 挂载远程服务器磁盘到本地 查找文件 pacman -S ntfs-3g unrar p7zip file-roller mlocate sshfs # 用法 sudo sshfs 用户名@ip地址:远程目录 本地目录 pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra pacman -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenhei 最后配置 git clone https://github.com/murongxixi/ArchConfig/ ~/Config # 下载配置文件 mv ~/Config/dotfiles/* ~/ # 自动挂载Windows分区 mkdir -p /home/murongxixi/Windows/System /home/murongxixi/Windows/Data echo -e \"UUID=0A9AD66165F33762 /home/murongxixi/Windows/System ntfs-3g defaults 0 0\\n\" >/etc/fstab echo -e \"UUID=299D817A2D97AD94 /home/murongxixi/Windows/Data ntfs-3g defaults 0 0\\n\" >/etc/fstab # 配置lightdm mkdir /usr/share/backgrounds cp ~/.config/awesome/themes/murongxixi/wallpaper.jpg /usr/share/backgrounds/wallpaper.jpg sed -i 's/greeter-session=lightdm-gtk-greeter/greeter-session=lightdm-slick-greeter/g' /etc/lightdm/lightdm.conf echo \\[Greeter\\] >/etc/lightdm/slick-greeter.conf echo background=/usr/share/backgrounds/wallpaper.jpg >>/etc/lightdm/slick-greeter.conf echo draw-grid=false >>/etc/lightdm/slick-greeter.conf echo enable-hidpi=on >>/etc/lightdm/slick-greeter.conf echo xft-dpi=192.0 >>/etc/lightdm/slick-greeter.conf fc-cache -fv 重启进入新安装的系统，可以看到如下界面： Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-04-15 16:19:31 "},"posts/softwares-install.html":{"url":"posts/softwares-install.html","title":"软件","keywords":"","body":"重启进入系统后，还有大量的软件要安装 驱动 sudo pacman -S intel-ucode intel-media-driver intel-compute-runtime sudo pacman -S libva-vdpau-driver mesa-vdpau libvdpau-va-gl vdpauinfo sudo pacman -S nvidia-dkms nvidia-utils opencl-nvidia sudo pacman -S bumblebee primus sudo systemctl enable bumblebeed.service sudo usermod -aG bumblebee murongxixi 工具 sudo pacman -S betterlockscreen # 锁屏 sudo pacman -S curl wget youtube-dl transmission-qt # 下载 yay -S xdman # 下载 sudo pacman -S v2ray qv2ray-dev-git # 科学上网 sudo pacman -S mousepad # 文本编辑器 sudo pacman -S geogebra # 画图 sudo pacman -S deepin-screen-recorder # 截图 sudo pacman -S deepin-image-viewer # 看图 sudo pacman -S deepin-picker # 取色 sudo pacman -S baidupcs-go-git baidunetdisk-bin # 度盘 sudo pacman -S electronic-wechat deepin-wine-tim # 微信 qq 文档 # wps sudo pacman -S wps-office-cn wps-office-mime-cn wps-office-mui-zh-cn ttf-wps-fonts # latex 如果不在乎节省硬盘空间可以直接 pacman -S texlive-most texlive-lang sudo pacman -S texlive-core texlive-latexextra texlive-science texlive-pictures texlive-fontsextra texlive-langchinese # latexindent依赖的perl库 sudo pacman -S perl-log-log4perl perl-yaml-tiny perl-file-homedir perl-unicode-linebreak yay -S perl-log-dispatch # pdf sudo pacman -S evince pdftk yay -S masterpdfeditor-free # markdown编辑 sudo pacman -S typora pandoc pandoc-citeproc pandoc-crossref princexml # markdown词典 sudo pacman -S hunspell hunspell-en_AU hunspell-en_CA hunspell-en_GB hunspell-en_US # 博客 sudo pacman -S hugo sudo pacman -S npm sudo npm install -g gitbook-cli # aur里的包都过期了 娱乐 sudo pacman -S ghostscript inkscape imagemagick pinta krita # 图片 sudo pacman -S mpv mpv-bash-completion-git vlc gpac mediainfo-gui mkvtoolnix-gui aegisub # 视频 sudo pacman -S audacious mpg123 spek # 音乐 sudo pacman -S shntool mac # 分割cue # shntool split -f example.cue -t %p\\ %n\\ %t -o flac example.ape 将example.ape分割 同时转成flac格式 yay -S zoom # 视频会议 编程 # python sudo pacman -S jupyterlab python-sympy python-pillow sudo pacman -S python-scikit-learn python-numba python-cvxopt python-matplotlib sudo pacman -S python-tensorflow-opt-cuda python-pytorch-opt-cuda tensorboard yay -S python-cvxpy python-pymc3 # octave sudo pacman -S octave octave-general sudo pacman -S octave-control octave-image octave-io octave-miscellaneous octave-signal octave-statistics # julia sudo pacman -S julia # dot sudo pacman -S graphviz xdot dot2tex # 各种格式化工具 sudo pacman -S clang shfmt autopep8 yapf 压制 sudo pacman -S vapoursynth ffms2 yay -S vapoursynth-editor-git # 脚本编辑 yay -S vapoursynth-plugin-lsmashsource-git # 分离mp4 yay -S d2vwitch-git vapoursynth-plugin-d2vsource-git # 分离ts yay -S vapoursynth-plugin-yadifmod-git # 反交错 yay -S vapoursynth-plugin-knlmeanscl-git # 降噪 yay -S vapoursynth-plugin-havsfunc-git # 函数合集 yay -S vapoursynth-plugin-damb-git # 音频处理 yay -S vapoursynth-plugin-delogo-git # 去台标 yay -S vapoursynth-plugin-waifu2x-w2xc-git # 放大 字体 pacman -S otf-fira-code mathjax yay -S otf-eb-garamond otf-font-awesome-4 picom 和 conky yay -S picom-tryone-git # 透明工具 yay -S conky-cairo # conky 最后有如下画面： Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-05-10 03:10:14 "},"posts/config/awesome.html":{"url":"posts/config/awesome.html","title":"awesome","keywords":"","body":"　　awesome是个平铺式窗口管理器，跟i3相似，但是它的配置文件是用lua写的，更加灵活，连右键菜单都可以私人定制，因此可以把系统折腾成任意你想要的样子。 awesome装好后在/etc/xdg/awesome/下有默认的配置文件rc.lua，在/usr/share/awesome/themes下有5个备选的主题： ┌─[murongxixi@murongxixi-xps] - [~] - [五 8月 09, 22:24] └─[$] <> ls /usr/share/awesome/themes default gtk sky xresources zenburn 如果用户自己不配置的话，或者用户自己的配置文件出问题时，系统都会滚回默认的配置。 　　用户自己配置的话，只需mkdir ~/.config/awesome，然后将默认的rc.lua和主题文件夹都复制过来，慢慢定制就行了： ┌─[murongxixi@murongxixi-xps] - [~] - [五 8月 09, 22:27] └─[$] <> ls .config/awesome autorun.sh rc.lua themes 　　首先定义全局变量、导入标准库、处理启动/运行错误，这些都不用改 local awesome, client, mouse, screen, tag = awesome, client, mouse, screen, tag local ipairs, string, os, table, tostring, tonumber, type = ipairs, string, os, table, tostring, tonumber, type -- awesome标准库 local gears, awful, wibox, vicious = require(\"gears\"), require(\"awful\"), require(\"wibox\"), require(\"vicious\") require(\"awful.autofocus\") local beautiful, naughty, menubar = require(\"beautiful\"), require(\"naughty\"), require(\"menubar\") -- awesome启动错误处理 if awesome.startup_errors then 同默认配置文件 不需做改动 end -- awesome运行错误处理 do local in_error = false 同默认配置文件 不需做改动 end 　　导入当前目录下的themes/murongxixi/theme.lua，主要是壁纸和配色，后面单独说： beautiful.init(awful.util.getdir(\"config\") .. \"/themes/murongxixi/theme.lua\") 　　配置默认的终端、编辑器、浏览器、文件管理器、mod键： terminal, editor, browser, filemanager, modkey = \"urxvt\", \"code\", \"chromium\", \"pcmanfm\", \"Mod4\" editor_cmd = terminal .. \" -e \" .. editor 　　定制工作区的标签，键盘上正好有10个数字键可以当快捷键，就用了天干： awful.util.tagnames = {\"甲\", \"乙\", \"丙\", \"丁\", \"戊\", \"己\", \"庚\", \"辛\", \"壬\", \"癸\"} 　　awesome布局，我只用环绕、最大化、浮动三种布局： awful.layout.layouts = {awful.layout.suit.corner.nw, awful.layout.suit.max, awful.layout.suit.floating} 　　定制右键菜单： myinputmenu = { -- 二级菜单 三种输入法可以自由切换 {\"英 文\", \"fcitx-remote -s fcitx-keyboard-us\"}, {\"中 文\", \"fcitx-remote -s sogoupinyin\"}, {\"日 文\", \"fcitx-remote -s mozc\"} } mywifimenu = { -- 二级菜单 {\"关 闭\", \"nmcli device disconnect wlp3s0\"}, -- 断开当前无线网络 {\"热 点\", \"nmcli connection up Hotspot\"} -- 创建热点 } myawesomemenu = { -- 二级菜单 awesome相关 {\"配 置\", string.format(\"%s %s\", editor, awesome.conffile)}, {\"主 题\", string.format(\"%s %s/.config/awesome/themes/murongxixi/theme.lua\", editor, os.getenv(\"HOME\"))}, {\"启 动\", string.format(\"%s %s/.config/awesome/autorun.sh\", editor, os.getenv(\"HOME\"))}, {\"重 启\", awesome.restart}, { \"退 出\", function() awesome.quit() end } } myconkymenu = { -- 二级菜单 conky相关 {\"编 辑\", string.format(\"%s %s/.config/conky/conky_murongxixi.lua\", editor, os.getenv(\"HOME\"))}, {\"编 辑\", string.format(\"%s %s/.config/conky/conkyrc\", editor, os.getenv(\"HOME\"))}, {\"启 动\", string.format(\"conky -c %s/.config/conky/conkyrc\", os.getenv(\"HOME\"))}, {\"退 出\", \"killall conky\"} } myexitmenu = { -- 二级菜单 { \"登 出\", function() awesome.quit() end }, {\"待 机\", \"systemctl suspend\"}, {\"休 眠\", \"systemctl hibernate\"}, {\"重 启\", \"systemctl reboot\"}, {\"关 机\", \"poweroff\"} } mymainmenu = -- 一级菜单 都是常用功能 不够可以继续加 非常爽 awful.menu( { items = { {\"终 端\", terminal}, {\"网 络\", browser}, {\"编 辑\", editor}, {\"文 件\", filemanager}, {\"微 信\", \"/usr/bin/electronic-wechat\"}, {\"音 乐\", \"/usr/bin/audacious\"}, {\"下 载\", \"/usr/bin/deluge\"}, {\"输 入\", myinputmenu}, -- 前面已定义 {\"无 线\", mywifimenu}, -- 前面已定义 {\"桌 面\", myawesomemenu}, -- 前面已定义 {\"监 视\", myconkymenu}, -- 前面已定义 {\"退 出\", myexitmenu} -- 前面已定义 } } ) 　　键盘布局不用改，之后定制任务栏，任务栏我只保留了三部分，从左到右依次是taglist、tasklist、widget，首先是taglist上鼠标动作定义(与默认配置一样，无需改动)： local taglist_buttons = gears.table.join( awful.button( -- 1代表左键单击 查看这个tag {}, 1, function(t) t:view_only() end ), awful.button( -- 3代表右键单击 将当前这个client移到点击的tag中 {}, 3, function(t) if client.focus then client.focus:move_to_tag(t) end end ), awful.button( -- 4代表中键上滚 切换到下一个tag {}, 4, function(t) awful.tag.viewnext(t.screen) end ), awful.button( -- 5代表中键下滚 切换到上一个tag {}, 5, function(t) awful.tag.viewprev(t.screen) end ) ) tasklist上鼠标动作定义跟taglist类似(与默认配置一样，无需改动)，只是左键单击变成了最小化，右键单击变成了显示所有正在运行的任务，就不贴了。 　　为每块屏幕设置壁纸，注意倒数第三行默认是gears.wallpaper.maximized(wallpaper, s, true)，参数true表示将壁纸拉伸到屏幕分辨率时不保持宽高比，当两者比例不匹配时会导致壁纸被拉长或压扁，故将其去掉： local function set_wallpaper(s) if beautiful.wallpaper then local wallpaper = beautiful.wallpaper if type(wallpaper) == \"function\" then -- 如果wallpaper是一个函数 wallpaper = wallpaper(s) end gears.wallpaper.maximized(wallpaper, s) end end -- 当一个屏的分辨率改变时 壁纸也跟着调整 screen.connect_signal(\"property::geometry\", set_wallpaper) 　　设置cpu的widget，用到了vicious包： cpuwidget = wibox.widget { forced_width = 60, border_width = 1, border_color = beautiful.fg_normal, color = beautiful.fg_normal, background_color = beautiful.bg_normal, widget = wibox.widget.graph -- 用graph显示变化情况 } cpuwidget_text = awful.tooltip({objects = {cpuwidget}}) -- 鼠标悬停时显示文本 vicious.register( cpuwidget, vicious.widgets.cpu, function(widget, args) cpuwidget_text:set_text( string.format(\"处理器总使用率：%s%%\\n核心使用率：%s%%, %s%%, %s%%, %s%%\", args[1], args[2], args[3], args[4], args[5]) ) return args[1] end, 1 ) -- 镜像反转 从右向左走 同时控制间隔 local cpuwidget = wibox.container.margin(wibox.container.mirror(cpuwidget, {horizontal = true}), 5, 10, 4, 4) 　　设置内存的widget： membar = wibox.widget { border_color = beautiful.fg_normal, bg = \"#DDDDFF30\", -- 通过30%的透明度来表示未使用的部分 color = beautiful.fg_normal, border_width = 1, forced_width = 32, forced_height = 32, min_value = 0, max_value = 1, thickness = 3, widget = wibox.container.arcchart -- 用角度环显示使用率 } memwidget_text = awful.tooltip({objects = {membar}}) awful.widget.watch( -- 通过watch监控 [[bash -c \"\"]], 10, -- 每10秒更新一次 function(widget, stdout) mem_now = {} for line in io.lines(\"/proc/meminfo\") do for k, v in string.gmatch(line, \"([%a]+):[%s]+([%d]+).+\") do if k == \"MemTotal\" then mem_now.total = v elseif k == \"MemAvailable\" then mem_now.ava = v end end end mem_now.used = mem_now.total - mem_now.ava used_perc = mem_now.used / mem_now.total widget.value = used_perc memwidget_text:set_text( string.format(\"内存消耗：%sMiB\\n / %sMiB\", math.floor(mem_now.used / 1024), math.floor(mem_now.total / 1024)) ) end, membar ) local memwidget = wibox.container.margin(wibox.container.mirror(membar, {horizontal = true}), 0, 10, 4, 4) 磁盘、电池、温度、亮度、声音都是用的arcchart，与内存类似，不一一贴了。 　　日期和时间： day_name = {\"月\", \"火\", \"水\", \"木\", \"金\", \"土\", \"日\"} big_name = {\"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\", \"拾\", \"廿\", \"卅\"} function to_large(num) -- 数字转大写 例如14会变成拾肆 if num 　　为每块屏幕执行如下代码： awful.screen.connect_for_each_screen( function(s) set_wallpaper(s) -- 设置壁纸 awful.tag( -- 添加tag awful.util.tagnames, s, { awful.layout.layouts[1], -- 这里可以为每个tag选择不同的默认布局 awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1], awful.layout.layouts[1] } ) -- s.mypromptbox = awful.widget.prompt() s.mytaglist = awful.widget.taglist {screen = s, filter = awful.widget.taglist.filter.all, buttons = taglist_buttons} s.mytasklist = -- 设置task wibox.container.margin( awful.widget.tasklist { screen = s, filter = awful.widget.tasklist.filter.currenttags, buttons = tasklist_buttons, style = { font = \"murongxixi 14\" -- task字体 这是我自己手动将苏新诗柳楷和fira code合并的字体 }, layout = { spacing = 20, layout = wibox.layout.flex.horizontal }, widget_template = { { { { { id = \"icon_role\", widget = wibox.widget.imagebox }, margins = 2, widget = wibox.container.margin -- 控制图标的间隔 }, { id = \"text_role\", widget = wibox.widget.textbox }, layout = wibox.layout.fixed.horizontal }, left = 10, right = 10, widget = wibox.container.margin -- 控制文本的间隔 }, id = \"background_role\", widget = wibox.container.background } }, 10, 10, 2, 2 ) s.mywibox = awful.wibar({position = \"top\", height = 40, screen = s}) -- 任务栏位置和高度 s.mywibox:setup { layout = wibox.layout.align.horizontal, -- 水平方向布局 {layout = wibox.layout.fixed.horizontal, s.mytaglist, s.mypromptbox}, -- 左 s.mytasklist, -- 中 { layout = wibox.layout.fixed.horizontal, wibox.widget.textbox(\"核\"), cpuwidget, wibox.widget.textbox(\"存\"), memwidget, wibox.widget.textbox(\"磁\"), diskrootwidget, diskhomewidget, wibox.widget.textbox(\"电\"), batwidget, wibox.widget.textbox(\"温\"), tempwidget, wibox.widget.textbox(\"亮\"), brightnesswidget, wibox.widget.textbox(\"声\"), volumewidget, -- wibox.widget.systray(), -- 我不用系统托盘 datewidget, wdaywidget, clockwidget } -- 右 } end ) 　　右键调出主菜单(与默认配置一样，无需改动)： root.buttons( gears.table.join( awful.button( {}, 3, function() mymainmenu:toggle() end ), awful.button({}, 4, awful.tag.viewnext), awful.button({}, 5, awful.tag.viewprev) ) ) 　　全局快捷键，我自己加了一些： globalkeys = gears.table.join( awful.key( -- mod + p 深度截图 {modkey}, \"p\", function() awful.spawn(\"/usr/bin/deepin-screenshot\") end ), awful.key( -- mod + r 启动rofi {modkey}, \"r\", function() awful.spawn(\"/usr/bin/rofi -show drun -modi drun\") end ), awful.key( -- 功能键 减小屏幕亮度 需要装上xorg-xbacklight {}, \"XF86MonBrightnessDown\", function() awful.util.spawn_with_shell(\"xbacklight -dec 5\") end ), awful.key( -- 功能键 增大屏幕亮度 {}, \"XF86MonBrightnessUp\", function() awful.util.spawn_with_shell(\"xbacklight -inc 5\") end ), awful.key( -- 功能键 减小键盘亮度 需要先将kb-light.py放在/usr/local/bin/目录下 {}, \"XF86KbdBrightnessDown\", function() awful.util.spawn_with_shell(\"kb-light.py - 10\") end ), awful.key( -- 功能键 增大键盘亮度 {}, \"XF86KbdBrightnessUp\", function() awful.util.spawn_with_shell(\"kb-light.py + 10\") end ), awful.key( -- 功能键 减小音量 {}, \"XF86AudioLowerVolume\", function() awful.util.spawn_with_shell(\"amixer set Master 5%-\") end ), awful.key( -- 功能键 增大音量 {}, \"XF86AudioRaiseVolume\", function() awful.util.spawn_with_shell(\"amixer set Master 5%+\") end ), awful.key( -- 静音 {}, \"XF86AudioMute\", function() awful.util.spawn_with_shell(\"amixer set Master toggle\") end ) ) 非全局快捷键也改了些，按个人喜好，不一一贴了，另外每个快捷键默认都有一个description说明功能的，这个会在帮助手册中归类显示，我用不着就全删了。 　　将10个数字键绑到10个tag上： for i = 0, 9 do if i == 0 then -- 默认只绑1到9 0需要自己处理 i = 10 end globalkeys = gears.table.join( globalkeys, awful.key( {modkey}, \"#\" .. i + 9, function() local screen = awful.screen.focused() local tag = screen.tags[i] if tag then tag:view_only() end end ), awful.key( {modkey, \"Control\"}, \"#\" .. i + 9, function() local screen = awful.screen.focused() local tag = screen.tags[i] if tag then awful.tag.viewtoggle(tag) end end ), awful.key( -- mod + shift + # 将当前任务移至tag# {modkey, \"Shift\"}, \"#\" .. i + 9, function() if client.focus then local tag = client.focus.screen.tags[i] if tag then client.focus:move_to_tag(tag) end end end ), awful.key( {modkey, \"Control\", \"Shift\"}, \"#\" .. i + 9, function() if client.focus then local tag = client.focus.screen.tags[i] if tag then client.focus:toggle_tag(tag) end end end ) ) end 　　规则： if screen.count() == 1 then -- 如果只连了一块屏幕 awful.rules.rules = { -- 通用规则 { rule = {}, properties = { focus = awful.client.focus.filter, raise = true, keys = clientkeys, buttons = clientbuttons, screen = awful.screen.preferred, placement = awful.placement.no_overlap + awful.placement.no_offscreen, size_hints_honor = false -- 去掉终端间的间隙 } }, -- 浮动的应用 { rule_any = { instance = { \"DTA\", -- Firefox addon DownThemAll. \"copyq\", -- Includes session name in class. \"pinentry\" }, class = { \"Arandr\", \"Blueman-manager\", \"Gpick\", \"Kruler\", \"MessageWin\", -- kalarm. \"Sxiv\", \"Tor Browser\", -- Needs a fixed window size to avoid fingerprinting by screen size. \"Wpa_gui\", \"veromix\", \"xtightvncviewer\", \"mpv\", -- 播放器 \"deepin-movie\", -- 播放器 \"Guake\", -- 顶部终端 \"Tilda\", -- 顶部终端 \"Matplotlib\" -- python画图 }, -- Note that the name property shown in xprop might be set slightly after creation of the client -- and the name shown there might not match defined rules here. name = { \"Event Tester\" -- xev. }, role = { \"AlarmWindow\", -- Thunderbird's calendar. \"ConfigManager\", -- Thunderbird's about:config. \"pop-up\" -- e.g. Google Chrome's (detached) Developer Tools. } }, properties = {floating = true} }, -- 以下是每个软件的默认打开tag 比如vscode默认在tag3 -- 第1个工作区 { rule = {class = \"URxvt\"}, properties = {screen = 1, tag = awful.util.tagnames[1]} }, -- 第2个工作区 { rule = {class = \"Chromium\"}, properties = {screen = 1, tag = awful.util.tagnames[2]} }, -- 第3个工作区 { rule = {class = \"code-oss\"}, properties = {screen = 1, tag = awful.util.tagnames[3]} }, { rule = {class = \"matplotlib\"}, properties = {screen = 1, tag = awful.util.tagnames[3]} }, -- 第4个工作区 文件管理器 { rule = {class = \"Pcmanfm\"}, properties = {screen = 1, tag = awful.util.tagnames[4]} }, -- 第5个工作区 pdf { rule = {class = \"Evince\"}, properties = {screen = 1, tag = awful.util.tagnames[5]} }, { rule = {class = \"Master PDF Editor\"}, properties = {screen = 1, tag = awful.util.tagnames[5]} }, -- 第6个工作区 wps { rule = {class = \"Wps\"}, properties = {screen = 1, tag = awful.util.tagnames[6]} }, { rule = {class = \"Wpp\"}, properties = {screen = 1, tag = awful.util.tagnames[6]} }, { rule = {class = \"Et\"}, properties = {screen = 1, tag = awful.util.tagnames[6]} }, -- 第7个工作区 微信 { rule = {class = \"electronic-wechat\"}, properties = {screen = 1, tag = awful.util.tagnames[7]} }, { rule = {class = \"Wine\"}, properties = {screen = 1, tag = awful.util.tagnames[7]} }, -- 第8个工作区 视频 { rule = {class = \"vsedit\"}, properties = {screen = 1, tag = awful.util.tagnames[8]} }, -- 第9个工作区 音乐 { rule = {class = \"Audacious\"}, properties = {screen = 1, tag = awful.util.tagnames[9]} }, -- 第10个工作区 下载 翻墙 { rule = {class = \"Deluge\"}, properties = {screen = 1, tag = awful.util.tagnames[10]} }, { rule = {class = \"transmission\"}, properties = {screen = 1, tag = awful.util.tagnames[10]} }, { rule = {class = \"shadowsocks-qt5\"}, properties = {screen = 1, tag = awful.util.tagnames[10]} } } else -- 如果连了多块屏幕 每个软件可以默认在其他屏上打开 不一一贴了 end 　　还有些信号处理函数，例如焦点跟随鼠标，无需改动，最后是自启动脚本： awful.spawn.with_shell(\"~/.config/awesome/autorun.sh\") 其内容如下： #!/usr/bin/env bash function run() { if ! pgrep $1; then $@ & fi } run /usr/lib/mate-polkit/polkit-mate-authentication-agent-1 & run compton --config ~/.config/compton.conf run udiskie -ans run fcitx run guake run /home/murongxixi/.config/conky/start_conky run /home/murongxixi/Softwares/XX-Net/start 　　主题文件 theme.lua： -- \"murongxixi\" awesome theme By murongxixi local themes_path = os.getenv(\"HOME\") .. \"/.config/awesome/themes/\" -- 主题文件夹目录 local theme = {} theme.wallpaper = themes_path .. \"murongxixi/wallpaper.jpg\" -- 壁纸 theme.font = \"murongxixi 16\" -- 默认字体 theme.fg_normal = \"#DDDDFF\" theme.fg_focus = \"#00D700\" theme.fg_urgent = \"#DCDCCC\" theme.bg_normal = \"#3F3F3F00\" theme.bg_focus = \"#1E232000\" theme.bg_urgent = \"#3F3F3F00\" theme.border_width = 0 -- 下面这些变量会覆盖上面的变量 -- [taglist|tasklist]_[bg|fg]_[focus|urgent|occupied|empty|volatile] -- titlebar_[normal|focus] -- tooltip_[font|opacity|fg_color|bg_color|border_width|border_color] -- Example: theme.taglist_bg_focus = \"#CC9393\" --theme.fg_widget = \"#AECF96\" --theme.fg_center_widget = \"#88A175\" --theme.fg_end_widget = \"#FF5656\" --theme.bg_widget = \"#494B4F\" --theme.border_widget = \"#3F3F3F\" theme.mouse_finder_color = \"#CC9393\" -- mouse_finder_[timeout|animate_timeout|radius|factor] -- menu_[bg|fg]_[normal|focus] -- menu_[border_color|border_width] theme.menu_height = 40 -- 右键菜单高度 theme.menu_width = 200 -- 右键菜单宽度 -- theme.menu_border_width = 2 -- 右键菜单边框 -- tag有任务打开和获得焦点时的标识 默认的正方形我不喜欢 自己设计了两个不同颜色的小直角标记 theme.taglist_squares_sel = themes_path .. \"murongxixi/icons/square_sel.png\" theme.taglist_squares_unsel = themes_path .. \"murongxixi/icons/square_unsel.png\" --theme.taglist_squares_resize = \"false\" theme.useless_gap = 0 -- 平铺窗口间的间距 屏幕小挥霍不起 直接设成零 return theme Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-03-24 15:10:30 "},"posts/config/conky.html":{"url":"posts/config/conky.html","title":"conky","keywords":"","body":"　　conky是个系统监视工具，下图右半边就是一个运行中的conky： 图里的各种圆环是用cairo画的，extra/conky编译时没开启对cairo的支持，必须用aur/conky-lua-nv才行，当然如果不画圆环的话就没必要用这个了。 　　conky全部配置好有三个文件，首先是启动脚本： ┌─[murongxixi@murongxixi-xps] - [~] - [五 8月 09, 02:56] └─[$] <> cat .config/conky/start_conky #!/bin/bash conky -c ~/.config/conky/conkyrc & 也可以把conky -c ~/.config/conky/conkyrc直接写到awesome的autorun.sh里，这样可以少一个文件。 　　主文件 conky.config = { update_interval = 1, double_buffer = true, own_window_class = Conky, no_buffers = true, own_window = true, own_window_type = 'override', own_window_transparent = true, draw_shades = false, minimum_width = 740, minimum_height = 2160, alignment = 'top_right', gap_x = 30, gap_y = 40, border_inner_margin = 0, border_outer_margin = 0, default_color = 'DDDDFF', lua_load = '~/.config/conky/conky_murongxixi.lua', lua_draw_hook_pre = 'main', } conky.text = [[ ${voffset 410}${alignr}${cpugraph cpu1 60,100 DDDDFF}${cpugraph cpu2 60,100 DDDDFF}${cpugraph cpu3 60,100 DDDDFF}${cpugraph cpu4 60,100 DDDDFF} ${voffset -10}${alignr}${cpugraph cpu5 60,100 DDDDFF}${cpugraph cpu6 60,100 DDDDFF}${cpugraph cpu7 60,100 DDDDFF}${cpugraph cpu8 60,100 DDDDFF} ${voffset -10}${alignr}${cpugraph cpu9 60,100 DDDDFF}${cpugraph cpu10 60,100 DDDDFF}${cpugraph cpu11 60,100 DDDDFF}${cpugraph cpu12 60,100 DDDDFF} ${voffset -10}${alignr}${cpugraph cpu13 60,100 DDDDFF}${cpugraph cpu14 60,100 DDDDFF}${cpugraph cpu15 60,100 DDDDFF}${cpugraph cpu16 60,100 DDDDFF} ${voffset 1125} ${goto 0}${upspeedgraph enp0s20f0u2u3 50,220 DDDDFF DDDDFF 12500 -t -l}${alignr}${upspeedgraph wlp59s0 50,220 DDDDFF DDDDFF 12500 -t -l} ${goto 0}${voffset 85}${downspeedgraph enp0s20f0u2u3 50,220 DDDDFF DDDDFF 12500 -t -l}${alignr}${downspeedgraph wlp59s0 50,220 DDDDFF DDDDFF 12500 -t -l} ]] 分为两部分： conky.config中是一些全局配置，比如画布的宽度、高度、对齐方法、与屏幕边缘的间隔、默认颜色等； conky.text是用来在画布上绘图的，cpugraph将cpu的运行情况画成图，upspeedgraph和downspeedgraph将网络的上传/下载情况画成图。 　　上图中除了cpu和网络的运行图外，剩下都是由lua脚本conky_murongxixi.lua绘制的，其结构如下： require \"cairo\" rings_table = { { name = \"time\", -- 命令名称 arg = \"%I.%M\", -- 命令参数 max = 12, -- 最大值 bg_color = default_bg_color, -- 前景 bg_alpha = clock_alpha[1][\"bg_alpha\"], -- 前景透明度 fg_color = default_fg_color, -- 背景 fg_alpha = clock_alpha[1][\"fg_alpha\"], -- 背景透明度 x = clock_x, -- 圆心横坐标 y = clock_y, -- 圆心纵坐标 radius = hour_min_sec_radius[1], -- 半径 thickness = hour_min_sec_thickness[1], -- 圆环厚度 start_angle = 0, -- 起始角度 end_angle = 360, -- 结束角度 graduated = true -- 是否分格 }, { 其他环的各种参数 }, …… } function draw_ring(cr, value, pt) local w, h = conky_window.width, conky_window.height -- 读取圆环的所有参数 local xc, yc, ring_r, ring_w, sa, ea, max, graduated = pt[\"x\"], pt[\"y\"], pt[\"radius\"], pt[\"thickness\"], pt[\"start_angle\"], pt[\"end_angle\"], pt[\"max\"], pt[\"graduated\"] local bgc, bga, fgc, fga = pt[\"bg_color\"], pt[\"bg_alpha\"], pt[\"fg_color\"], pt[\"fg_alpha\"] local angle_0 = sa * (2 * math.pi / 360) - math.pi / 2 -- 起始弧度 local angle_f = ea * (2 * math.pi / 360) - math.pi / 2 -- 结束弧度 cairo_set_line_width(cr, ring_w) -- 设置画笔为圆环厚度 if value > max then value = value - max end -- 先画背景环 if graduated then -- 如果是分格的 for i = 1, max do -- 背景环与max值有关 local angle_start = angle_0 + (i - 1) * (ea - sa) * 2 * math.pi / (max * 360) local angle_end = angle_0 + (i * (ea - sa) / max - clock_gap) * 2 * math.pi / 360 cairo_arc(cr, xc, yc, ring_r, angle_start, angle_end) cairo_set_source_rgba(cr, rgb_to_r_g_b(bgc, bga)) cairo_stroke(cr) end else -- 不分格 直接根据起始/结束弧度画 cairo_arc(cr, xc, yc, ring_r, angle_0, angle_f) cairo_set_source_rgba(cr, rgb_to_r_g_b(bgc, bga)) cairo_stroke(cr) end -- 再画前景环 if graduated then for i = 1, value do -- 前景环与命令的返回值有关 local angle_start = angle_0 + (i - 1) * (ea - sa) * 2 * math.pi / (max * 360) local angle_end = angle_0 + (i * (ea - sa) / max - clock_gap) * 2 * math.pi / 360 cairo_arc(cr, xc, yc, ring_r, angle_start, angle_end) cairo_set_source_rgba(cr, rgb_to_r_g_b(fgc, fga)) cairo_stroke(cr) end else -- 获得百分比 if max == 12500 then --如果是网络 采用对数拉伸 if value 5 then for i in pairs(rings_table) do setup_rings(cr, rings_table[i]) end end cairo_destroy(cr) end 　　除了用cairo_arc绘制圆环外，还可以绘制直线： cairo_move_to(cr, xc_start, yc_start) -- 起点横纵坐标 cairo_line_to(cr, xc_end, yc_end) -- 终点横纵坐标 cairo_set_line_width(cr, width) -- 宽度 cairo_stroke(cr) 以及写字： cairo_select_font_face(cr, font_name, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT) -- 字体 cairo_set_font_size(cr, font_size) -- 字号 cairo_move_to(cr, xc, yc) -- 起点横纵坐标 cairo_set_source_rgba(cr, rgb_to_r_g_b(default_fg_color, 1.0)) -- 颜色 透明度 cairo_show_text(cr, str) 　　用cairo写字，默认是左对齐的，要想居中对齐，得先算出文本的宽度和高度： local extents = cairo_text_extents_t:create() tolua.takeownership(extents) local x, y cairo_select_font_face(cr, font_name, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT) cairo_set_font_size(cr, font_size) cairo_text_extents(cr, str, extents) -- 计算str的长度 x = xc - (extents.width / 2 + extents.x_bearing) -- 向左移动半个字符串的长度 y = yc - (extents.height / 2 + extents.y_bearing) -- 向上移动半个字符串的高度 cairo_move_to(cr, x, y) cairo_set_source_rgba(cr, rgb_to_r_g_b(default_fg_color, 1.0)) cairo_show_text(cr, str) 　　右对齐也是类似的处理方法，不过计算宽度时空格不算进去，对于\"a b\"这样的字符串，还得先将空格替换掉： str = str:gsub(string.rep(\" \", start_space_len), string.rep(\"a\", start_space_len)) local extents = cairo_text_extents_t:create() tolua.takeownership(extents) local x, y cairo_select_font_face(cr, font_name, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT) cairo_set_font_size(cr, font_size) cairo_text_extents(cr, str, extents) x = conky_window.width - (extents.width + 2 * extents.x_bearing) -- 向左移动整个字符串长度 y = yc cairo_move_to(cr, x, y) cairo_set_source_rgba(cr, rgb_to_r_g_b(default_fg_color, 1.0)) str = str:gsub(string.rep(\"a\", start_space_len), string.rep(\" \", start_space_len)) cairo_show_text(cr, str) Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-03-24 15:10:30 "},"posts/config/convert.html":{"url":"posts/config/convert.html","title":"convert","keywords":"","body":"　　convert是imagemagick包里的一个工具，可以对图片进行简单处理。 　　截取图片： convert input -crop wxh+dx+dy output 其中w和h是output的宽和高，dx和dy是output左上角相对于input左上角的偏移。 　　横向拼接图片(两张图片的高度必须相同)： convert 1.jpg 2.jpg +append output.jpg 　　纵向拼接图片(两张图片的宽度必须相同)： convert 1.jpg 2.jpg -append output.jpg 　　横向＋纵向： convert \\( 1.jpg 2.jpg 3.jpg +append \\) \\( 4.jpg 5.jpg 6.jpg +append \\) \\( 7.jpg 8.jpg 9.jpg +append \\) -append output.jpg 　　更多用法见官网手册 Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-03-24 15:10:30 "},"posts/config/ffmpeg.html":{"url":"posts/config/ffmpeg.html","title":"ffmpeg","keywords":"","body":"　　ffmpeg不需要单独装，装mpv就会把它顺带也装上。它包含三个工具，分别是ffprobe、ffplay、ffmpeg。 ffprobe 　　这是一个用来查看视频信息的工具，命令为ffprobe 文件名，输出如下所示： ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [六 8月 10, 01:04] └─[$] ffprobe ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts ffprobe version n4.2 Copyright (c) 2007-2019 the FFmpeg developers built with gcc 9.1.0 (GCC) configuration: --prefix=/usr --disable-debug --disable-static --disable-stripping --enable-fontconfig --enable-gmp --enable-gnutls --enable-gpl --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libdav1d --enable-libdrm --enable-libfreetype --enable-libfribidi --enable-libgsm --enable-libiec61883 --enable-libjack --enable-libmodplug --enable-libmp3lame --enable-libopencore_amrnb --enable-libopencore_amrwb --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libv4l2 --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxcb --enable-libxml2 --enable-libxvid --enable-nvdec --enable-nvenc --enable-omx --enable-shared --enable-version3 libavutil 56. 31.100 / 56. 31.100 libavcodec 58. 54.100 / 58. 54.100 libavformat 58. 29.100 / 58. 29.100 libavdevice 58. 8.100 / 58. 8.100 libavfilter 7. 57.100 / 7. 57.100 libswscale 5. 5.100 / 5. 5.100 libswresample 3. 5.100 / 3. 5.100 libpostproc 55. 5.100 / 55. 5.100 Input #0, mpegts, from '/home/murongxixi/Videos/HNTV-谭晶《九儿》[我是歌手].ts': Duration: 00:05:01.03, start: 1963.431211, bitrate: 16201 kb/s Program 3601 Stream #0:0[0xb10]: Video: mpeg2video (Main) ([2][0][0][0] / 0x0002), yuv420p(tv, top first), 1920x1080 [SAR 1:1 DAR 16:9], 16000 kb/s, 25 fps, 25 tbr, 90k tbn, 50 tbc Stream #0:1[0xb13](eng): Audio: ac3 ([6][0][0][0] / 0x0006), 48000 Hz, 5.1(side), fltp, 320 kb/s Stream #0:2[0xb14](eng): Audio: mp2 ([3][0][0][0] / 0x0003), 48000 Hz, stereo, fltp, 128 kb/s 其中第3行是它的版本信息，第4行是它的编译信息，第5行是编译时的选项，分别开启/关闭了哪些功能，第6-13行是它各个组件的版本号。这些信息与视频文件无关，如果不想看到它们只需加上-hide_banner即可： ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [六 8月 10, 01:06] └─[$] ffprobe -hide_banner ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts Input #0, mpegts, from '/home/murongxixi/Videos/HNTV-谭晶《九儿》[我是歌手].ts': Duration: 00:05:01.03, start: 1963.431211, bitrate: 16201 kb/s Program 3601 Stream #0:0[0xb10]: Video: mpeg2video (Main) ([2][0][0][0] / 0x0002), yuv420p(tv, top first), 1920x1080 [SAR 1:1 DAR 16:9], 16000 kb/s, 25 fps, 25 tbr, 90k tbn, 50 tbc Stream #0:1[0xb13](eng): Audio: ac3 ([6][0][0][0] / 0x0006), 48000 Hz, 5.1(side), fltp, 320 kb/s Stream #0:2[0xb14](eng): Audio: mp2 ([3][0][0][0] / 0x0003), 48000 Hz, stereo, fltp, 128 kb/s 这是谭老师的九儿视频，Duration: 00:05:01.03是时长，bitrate: 16201 kb/s是码率，三行Stream表明有三个轨道(默认先视频后音频，从0开始编号)： 0号轨道Stream #0:0是视频轨，编码格式mpeg2video，颜色空间yuv，采样420，隔行编码顶场优先top first，分辨率1920x1080，显示宽高比16:9，码率16000 kb/s，帧率25 fps。 1号轨道Stream #0:1是第一条音频轨，编码格式ac3，5.1声道，码率320 kb/s。 2号轨道Stream #0:2是第二条音频轨，编码格式mp2，stereo声道，码率128 kb/s。 ffplay 　　这是一个用来播放视频的工具，命令为ffplay -hide_banner ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts，输出如下所示： 此外还能进行调试，命令为ffplay -hide_banner -flags2 +export_mvs ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -vf codecview=mv=pf+bf+bb，输出如下所示： 密密麻麻的小箭头记录了帧之间的运动方向(突然发现这张图真是理解向量场的好图)。 ffmpeg 　　单独抽出每条轨道： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -map 0:0 -c copy a.mpeg # 视频轨 ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -map 0:1 -c copy a.ac3 # 第一条音频轨 ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -map 0:2 -c copy a.mp2 # 第二条音频轨 其中-map 0:*具体对应哪条轨道参考上面ffprobe的输出，-c copy表明对轨道直接复制，不重新编码。由于该视频只有一个视频轨，因此也可以通过如下命令抽取： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -an -c copy a.mpeg # 视频轨 其中-an表示忽略音频部分(audio neglect)，类似的如下命令可以抽出第一条音频轨： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -vn -c copy a.ac3 # 第一条音频轨 其中-vn表示忽略视频部分(该方法无法抽第二条音频轨)。 　　不重新编码，更换封装格式 ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -c copy o.vob # 换成vob封装格式 ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -c copy o.mp4 # 换成mp4封装格式 换封装的前提是：目标封装格式支持原来的的视频音频编码，比如原视频的音轨是ac3编码的，那它就没法用mp4重新封装，因为mp4不支持ac3音轨。 　　删除ac3这条音频轨： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -map 0:0 -map 0:2 -c copy o.ts 　　-map还能跨文件合并，例如想将a.mp4的视频(假设是0号轨道)与b.mp4的音频(假设是2号轨道)合并，可以通过通过如下命令实现： ffmpeg -hide_banner -i a.mp4 -i b.mp4 -map 0:0 -map 1:2 -c copy o.mp4 即-i后面的文件从0开始编号，-map 1:2表示1号文件的2号轨道。 　　截取视频的第1分钟到第3分钟： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -ss 00:01:00.000 -to 00:03:00.000 -c copy o.ts 　　连接多个视频，针对早期的DVD碟(一堆.vob文件)或者被分割的在线视频。假设有3个视频，分别是1.mp4、2.mp4、3.mp4，只需执行如下命令即可： echo file '1.mp4' > filelist.txt echo file '2.mp4' >> filelist.txt echo file '3.mp4' >> filelist.txt ffmpeg -hide_banner -f concat -i filelist.txt -c copy o.mp4 　　调整视频分辨率，长宽均缩小为原来的一半，以h264重新编码输出，编码参数为-qp 0： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -vf \"scale=0.5*in_w:0.5*in_h\" -c:v libx264 -qp 0 -an o.264 要想先预览效果可以用前面的ffplay： ffplay -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -vf \"scale=0.5*in_w:0.5*in_h\" 　　添加图片水印，水印位置通过overlay设置： ffmpeg -hide_banner -i a.mp4 -i \"logo.png\" -filter_complex \"overlay=120:120\" -c:a copy -c:v libx264 -crf 0 -preset slow -tune film o.mp4 　　调整亮度，参数1.6可调： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -vf \"lutyuv=y=val*1.6\" -c:v libx264 -qp 0 -an o.264 ffplay预览： ffplay -hide_banner ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ts -vf \"lutyuv=y=val*1.6\" 　　视频重编码一般不用ffmpeg，音频重编码： # -ar表示采样率 -b:a表示码率 ffmpeg -hide_banner -i input_file -vn -c:a aac -ar 48000 -b:a 320k o.m4a # 重编码为aac ffmpeg -hide_banner -i input_file -vn -c:a flac o.flac # 重编码为flac ffmpeg -hide_banner -i input_file -vn -c:a alac o.m4a # 重编码为alac 　　查看频谱，横轴频率，纵轴时间，第一张图是九儿ts视频里的ac3，到15000左右就截断了；第二张是无损的九儿flac，频谱就非常饱满： ffmpeg -hide_banner -i ~/Videos/HNTV-谭晶《九儿》\\[我是歌手\\].ac3 -lavfi showspectrumpic=s=960x540:orientation=1 spectrum1.png ffmpeg -hide_banner -i 谭晶\\ 歌手\\ 02\\ 九儿.flac -lavfi showspectrumpic=s=960x540:orientation=1 spectrum2.png 　　增大音量，参数2可调： ffmpeg -hide_banner -i input_file -af 'volume=2' output_file Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-03-24 15:10:30 "},"posts/config/nmcli.html":{"url":"posts/config/nmcli.html","title":"nmcli","keywords":"","body":"　　查看设备情况 ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [五 8月 09, 23:27] └─[$] nmcli device DEVICE TYPE STATE CONNECTION enp0s20f0u2u3 ethernet 已连接 有线连接 1 wlp59s0 wifi 已断开 -- # 无线暂时没有连接 p2p-dev-wlp59s0 wifi-p2p 已断开 -- lo loopback 未托管 -- 　　查看可以搜到的无线信号 ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [五 8月 09, 23:27] └─[$] nmcli device wifi list IN-USE SSID MODE CHAN RATE SIGNAL BARS SECURITY 28-2-902 Infra 10 130 Mbit/s 79 ▂▄▆_ WPA1 WPA2 CMCC-Q2aM Infra 2 130 Mbit/s 75 ▂▄▆_ WPA1 WPA2 TP-LINK_51D0 Infra 11 405 Mbit/s 52 ▂▄__ WPA1 WPA2 28-2-902_5G Infra 36 135 Mbit/s 52 ▂▄__ WPA1 WPA2 TP-LINK_702 Infra 6 405 Mbit/s 50 ▂▄__ WPA1 WPA2 　　连接名称为CMCC-Q2aM、密码为123456的无线网络 ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [五 8月 09, 23:29] └─[$] nmcli device wifi connect CMCC-Q2aM password 123456 成功用 \"wlp59s0c192bc0c-64fb-484d-91d0-a32ebfacb1df\" 激活了设备 \"\"。 若成功连上，在/etc/NetworkManager/system-connections目录下会生成CMCC-Q2aM.nmconnection文件，下次要想再连接该网络直接nmcli connection up CMCC-Q2aM即可。 　　查看当前保存的全部连接 ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [六 8月 10, 00:13] └─[$] nmcli connection show NAME UUID TYPE DEVICE 有线连接 1 c87e77aa-76fb-34db-8203-372d6218ab26 ethernet enp0s20f0u2u3 CMCC-Q2aM c192bc0c-64fb-484d-91d0-a32ebfacb1df wifi wlp59s0 木兰天池 b1871b1a-fb60-43bb-a9dd-b1947b217349 wifi -- 小米手机 68a8f926-d160-4ba0-ae0b-4414dcdd35af wifi -- HOJO qunsheng ea4f578a-7a24-4587-9d1b-3c45b2e80f0b wifi -- HUST_WIRELESS 98714e86-c3ec-4344-af42-a5f1ea28b119 wifi -- KST_WIFI 7f0310d3-6189-4b6d-89ed-f80405eddad6 wifi -- 　　断开当前的无线连接 ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [六 8月 10, 00:14] └─[$] nmcli device disconnect wlp59s0 成功断开设备 \"wlp59s0\"。 　　创建名称为murongxixi、密码为××××××××××的热点 ┌─[murongxixi@murongxixi-xps] - [~/Gitbook/Arch] - [六 8月 10, 00:59] └─[$] nmcli device wifi hotspot ssid murongxixi password ×××××××××× 成功用 \"wlp59s005e6dbf3-724d-4e00-9756-ce1f6e00fae8\" 激活了设备 \"\"。 若成功创建，在/etc/NetworkManager/system-connections目录下会生成Hotspot.nmconnection文件，下次要想再创建热点直接nmcli connection up Hotspot即可。 Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-03-24 15:10:30 "},"posts/config/vscode.html":{"url":"posts/config/vscode.html","title":"vscode","keywords":"","body":"基本配置 　　英文等宽字体用Fira，中文用苏新诗柳楷，开启连字，不显示缩略图，在视区宽度和wordWrapColumn的较小值处换行： { \"editor.fontFamily\": \"'Fira Code Retina', '方正苏新诗柳楷简体-yolan'\", \"editor.fontSize\": 16, \"editor.fontLigatures\": true, \"editor.minimap.enabled\": false, \"editor.wordWrapColumn\": 200, \"editor.wordWrap\": \"bounded\" } 　　底部状态栏可见，隐藏上方菜单栏，删除文件时是否提示： { \"workbench.statusBar.visible\": true, \"window.menuBarVisibility\": \"toggle\", \"explorer.confirmDelete\": false } 常用插件 简体中文语言包 TabNine：自动补全工具 A-super-themes：霓虹灯主题 发光字体 A-super-translate：划词翻译 Bracket Pair Colorizer 2：括号配对 Icon Fonts：可以输入awesome font vscode-icons：文件图标 Clang-Format：格式化工具 C/C++：C和C++用clang-format格式化 { \"[cpp]\": {\"editor.defaultFormatter\": \"xaver.clang-format\"}, \"[c]\": {\"editor.defaultFormatter\": \"xaver.clang-format\"} } Prettier-Code { \"[json]\": {\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"}, \"[jsonc]\": {\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"} } shell-format { \"shellformat.path\": \"/usr/bin/shfmt\" } Python vscode-lua Julia Code Runner：主流的编程语言几乎都支持，右键直接运行 Markdown Preview Enhance { \"markdown-preview-enhanced.enableExtendedTableSyntax\": true, \"markdown-preview-enhanced.enableCriticMarkupSyntax\": true, \"markdown-preview-enhanced.enableScriptExecution\": true, \"markdown-preview-enhanced.liveUpdate\": false, \"markdown-preview-enhanced.mathRenderingOption\": \"MathJax\", # 配置文件是.mume/mathjax_config.js \"markdown-preview-enhanced.printBackground\": true } LaTeX Workshop：用evince做pdf浏览器 默认xelatex编译一次 { \"latex-workshop.latex.recipes\": [ { \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"pdflatex ➞ bibtex ➞ pdflatex × 2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] }, { \"name\": \"xelatex ➞ bibtex ➞ xelatex × 2\", \"tools\": [ \"xelatex\", \"bibtex\", \"xelatex\", \"xelatex\" ] }, ], \"latex-workshop.latex.tools\": [ { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"-outdir=%OUTDIR%\", \"%DOC%\" ], \"env\": {} }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ], \"env\": {} }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ], \"env\": {} } ], \"latex-workshop.view.pdf.viewer\": \"external\", # tab \"latex-workshop.view.pdf.external.viewer.command\": \"evince\", \"latex-workshop.view.pdf.external.synctex\": { \"command\": \"evince\", \"args\": [ \"%LINE%\", \"%PDF%\", \"%TEX%\" ] }, } Copyright © Avanti 2020 all right reserved，powered by Gitbook文件最后修改时间： 2020-03-24 15:10:30 "}}